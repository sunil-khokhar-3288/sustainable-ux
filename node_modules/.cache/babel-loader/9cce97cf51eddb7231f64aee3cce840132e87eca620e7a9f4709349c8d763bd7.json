{"ast":null,"code":"var _jsxFileName = \"C:\\\\D-Drive\\\\AI For Retail\\\\Sustainability Hackathon FLO 2025\\\\Latest Code\\\\sustainable-ux\\\\src\\\\GPUStressTest.js\",\n  _s = $RefreshSig$();\nimport * as THREE from \"three\";\nexport class GPUStressTest {\n  constructor(scene, renderer) {\n    this.scene = scene;\n    this.renderer = renderer;\n    this.stressObjects = [];\n    this.isRunning = false;\n  }\n  startStressTest(intensity = 100) {\n    this.isRunning = true;\n    this.clearStressObjects();\n\n    // Create multiple complex geometries to stress the GPU\n    const geometries = [new THREE.SphereGeometry(0.5, 32, 32), new THREE.BoxGeometry(1, 1, 1), new THREE.ConeGeometry(0.5, 1, 32), new THREE.CylinderGeometry(0.5, 0.5, 1, 32), new THREE.TorusGeometry(0.5, 0.2, 16, 100)];\n    const materials = [new THREE.MeshStandardMaterial({\n      color: 0xff0000\n    }), new THREE.MeshStandardMaterial({\n      color: 0x00ff00\n    }), new THREE.MeshStandardMaterial({\n      color: 0x0000ff\n    }), new THREE.MeshStandardMaterial({\n      color: 0xffff00\n    }), new THREE.MeshStandardMaterial({\n      color: 0xff00ff\n    })];\n\n    // Create stress objects based on intensity\n    for (let i = 0; i < intensity; i++) {\n      const geometry = geometries[i % geometries.length];\n      const material = materials[i % materials.length];\n      const mesh = new THREE.Mesh(geometry, material);\n\n      // Random positioning\n      mesh.position.set((Math.random() - 0.5) * 20, (Math.random() - 0.5) * 20, (Math.random() - 0.5) * 20);\n\n      // Random rotation\n      mesh.rotation.set(Math.random() * Math.PI, Math.random() * Math.PI, Math.random() * Math.PI);\n      this.stressObjects.push(mesh);\n      this.scene.add(mesh);\n    }\n\n    // Start rotation animation for stress objects\n    this.animateStressObjects();\n  }\n  animateStressObjects() {\n    if (!this.isRunning) return;\n    this.stressObjects.forEach((obj, index) => {\n      obj.rotation.x += 0.01 * (index % 3 + 1);\n      obj.rotation.y += 0.01 * (index % 2 + 1);\n      obj.rotation.z += 0.01 * (index % 4 + 1);\n    });\n    requestAnimationFrame(() => this.animateStressObjects());\n  }\n  stopStressTest() {\n    this.isRunning = false;\n    this.clearStressObjects();\n  }\n  clearStressObjects() {\n    this.stressObjects.forEach(obj => {\n      this.scene.remove(obj);\n      obj.geometry.dispose();\n      obj.material.dispose();\n    });\n    this.stressObjects = [];\n  }\n  adjustIntensity(newIntensity) {\n    if (this.isRunning) {\n      this.startStressTest(newIntensity);\n    }\n  }\n}\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function StressTestControls({\n  stressTest,\n  isRunning,\n  onToggle,\n  onIntensityChange\n}) {\n  _s();\n  const [intensity, setIntensity] = useState(50);\n  const handleIntensityChange = e => {\n    const newIntensity = parseInt(e.target.value);\n    setIntensity(newIntensity);\n    onIntensityChange(newIntensity);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'fixed',\n      bottom: '10px',\n      left: '10px',\n      background: 'linear-gradient(180deg, rgba(236,253,245,0.9), rgba(209,250,229,0.88))',\n      color: '#073b28',\n      padding: '15px',\n      borderRadius: '12px',\n      fontFamily: 'monospace',\n      fontSize: '12px',\n      zIndex: 1000,\n      border: '1px solid rgba(16,185,129,0.35)',\n      minWidth: '200px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        margin: '0 0 10px 0',\n        fontSize: '14px',\n        color: '#065f46'\n      },\n      children: \"GPU Stress Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onToggle,\n        style: {\n          background: isRunning ? 'linear-gradient(135deg, #f87171, #ef4444)' : 'linear-gradient(135deg, #34d399, #10b981)',\n          color: '#0b0b0b',\n          border: 'none',\n          padding: '8px 16px',\n          borderRadius: '8px',\n          cursor: 'pointer',\n          fontSize: '12px',\n          width: '100%'\n        },\n        children: isRunning ? 'Stop Stress Test' : 'Start Stress Test'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          display: 'block',\n          marginBottom: '5px'\n        },\n        children: [\"Intensity: \", intensity]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"10\",\n        max: \"500\",\n        value: intensity,\n        onChange: handleIntensityChange,\n        style: {\n          width: '100%',\n          accentColor: '#10B981'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '10px',\n          color: '#065f46',\n          marginTop: '2px'\n        },\n        children: \"More objects = Higher GPU load\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: '10px',\n        color: '#065f46'\n      },\n      children: isRunning ? 'Stress test is running' : 'Click start to stress test GPU'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n_s(StressTestControls, \"Ts5+krWdXRL7V/dTPpK986MJ0iM=\");\n_c = StressTestControls;\nvar _c;\n$RefreshReg$(_c, \"StressTestControls\");","map":{"version":3,"names":["THREE","GPUStressTest","constructor","scene","renderer","stressObjects","isRunning","startStressTest","intensity","clearStressObjects","geometries","SphereGeometry","BoxGeometry","ConeGeometry","CylinderGeometry","TorusGeometry","materials","MeshStandardMaterial","color","i","geometry","length","material","mesh","Mesh","position","set","Math","random","rotation","PI","push","add","animateStressObjects","forEach","obj","index","x","y","z","requestAnimationFrame","stopStressTest","remove","dispose","adjustIntensity","newIntensity","React","useState","jsxDEV","_jsxDEV","StressTestControls","stressTest","onToggle","onIntensityChange","_s","setIntensity","handleIntensityChange","e","parseInt","target","value","style","bottom","left","background","padding","borderRadius","fontFamily","fontSize","zIndex","border","minWidth","children","margin","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","onClick","cursor","width","display","type","min","max","onChange","accentColor","marginTop","_c","$RefreshReg$"],"sources":["C:/D-Drive/AI For Retail/Sustainability Hackathon FLO 2025/Latest Code/sustainable-ux/src/GPUStressTest.js"],"sourcesContent":["import * as THREE from \"three\";\n\nexport class GPUStressTest {\n  constructor(scene, renderer) {\n    this.scene = scene;\n    this.renderer = renderer;\n    this.stressObjects = [];\n    this.isRunning = false;\n  }\n\n  startStressTest(intensity = 100) {\n    this.isRunning = true;\n    this.clearStressObjects();\n    \n    // Create multiple complex geometries to stress the GPU\n    const geometries = [\n      new THREE.SphereGeometry(0.5, 32, 32),\n      new THREE.BoxGeometry(1, 1, 1),\n      new THREE.ConeGeometry(0.5, 1, 32),\n      new THREE.CylinderGeometry(0.5, 0.5, 1, 32),\n      new THREE.TorusGeometry(0.5, 0.2, 16, 100)\n    ];\n\n    const materials = [\n      new THREE.MeshStandardMaterial({ color: 0xff0000 }),\n      new THREE.MeshStandardMaterial({ color: 0x00ff00 }),\n      new THREE.MeshStandardMaterial({ color: 0x0000ff }),\n      new THREE.MeshStandardMaterial({ color: 0xffff00 }),\n      new THREE.MeshStandardMaterial({ color: 0xff00ff })\n    ];\n\n    // Create stress objects based on intensity\n    for (let i = 0; i < intensity; i++) {\n      const geometry = geometries[i % geometries.length];\n      const material = materials[i % materials.length];\n      const mesh = new THREE.Mesh(geometry, material);\n      \n      // Random positioning\n      mesh.position.set(\n        (Math.random() - 0.5) * 20,\n        (Math.random() - 0.5) * 20,\n        (Math.random() - 0.5) * 20\n      );\n      \n      // Random rotation\n      mesh.rotation.set(\n        Math.random() * Math.PI,\n        Math.random() * Math.PI,\n        Math.random() * Math.PI\n      );\n      \n      this.stressObjects.push(mesh);\n      this.scene.add(mesh);\n    }\n\n    // Start rotation animation for stress objects\n    this.animateStressObjects();\n  }\n\n  animateStressObjects() {\n    if (!this.isRunning) return;\n\n    this.stressObjects.forEach((obj, index) => {\n      obj.rotation.x += 0.01 * (index % 3 + 1);\n      obj.rotation.y += 0.01 * (index % 2 + 1);\n      obj.rotation.z += 0.01 * (index % 4 + 1);\n    });\n\n    requestAnimationFrame(() => this.animateStressObjects());\n  }\n\n  stopStressTest() {\n    this.isRunning = false;\n    this.clearStressObjects();\n  }\n\n  clearStressObjects() {\n    this.stressObjects.forEach(obj => {\n      this.scene.remove(obj);\n      obj.geometry.dispose();\n      obj.material.dispose();\n    });\n    this.stressObjects = [];\n  }\n\n  adjustIntensity(newIntensity) {\n    if (this.isRunning) {\n      this.startStressTest(newIntensity);\n    }\n  }\n}\n\nimport React, { useState } from 'react';\n\nexport function StressTestControls({ stressTest, isRunning, onToggle, onIntensityChange }) {\n  const [intensity, setIntensity] = useState(50);\n\n  const handleIntensityChange = (e) => {\n    const newIntensity = parseInt(e.target.value);\n    setIntensity(newIntensity);\n    onIntensityChange(newIntensity);\n  };\n\n  return (\n    <div style={{\n      position: 'fixed',\n      bottom: '10px',\n      left: '10px',\n      background: 'linear-gradient(180deg, rgba(236,253,245,0.9), rgba(209,250,229,0.88))',\n      color: '#073b28',\n      padding: '15px',\n      borderRadius: '12px',\n      fontFamily: 'monospace',\n      fontSize: '12px',\n      zIndex: 1000,\n      border: '1px solid rgba(16,185,129,0.35)',\n      minWidth: '200px'\n    }}>\n      <h3 style={{ margin: '0 0 10px 0', fontSize: '14px', color: '#065f46' }}>GPU Stress Test</h3>\n      \n      <div style={{ marginBottom: '10px' }}>\n        <button\n          onClick={onToggle}\n          style={{\n            background: isRunning ? 'linear-gradient(135deg, #f87171, #ef4444)' : 'linear-gradient(135deg, #34d399, #10b981)',\n            color: '#0b0b0b',\n            border: 'none',\n            padding: '8px 16px',\n            borderRadius: '8px',\n            cursor: 'pointer',\n            fontSize: '12px',\n            width: '100%'\n          }}\n        >\n          {isRunning ? 'Stop Stress Test' : 'Start Stress Test'}\n        </button>\n      </div>\n\n      <div style={{ marginBottom: '10px' }}>\n        <label style={{ display: 'block', marginBottom: '5px' }}>\n          Intensity: {intensity}\n        </label>\n        <input\n          type=\"range\"\n          min=\"10\"\n          max=\"500\"\n          value={intensity}\n          onChange={handleIntensityChange}\n          style={{\n            width: '100%',\n            accentColor: '#10B981'\n          }}\n        />\n        <div style={{ fontSize: '10px', color: '#065f46', marginTop: '2px' }}>\n          More objects = Higher GPU load\n        </div>\n      </div>\n\n      <div style={{ fontSize: '10px', color: '#065f46' }}>\n        {isRunning ? 'Stress test is running' : 'Click start to stress test GPU'}\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}