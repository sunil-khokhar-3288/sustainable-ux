{"ast":null,"code":"import _objectSpread from\"C:/D-Drive/AI For Retail/Sustainability Hackathon FLO 2025/Latest Code/sustainable-ux/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import*as THREE from\"three\";export class GPUMonitor{constructor(renderer){this.renderer=renderer;this.gl=renderer.getContext();this.stats={fps:0,frameTime:0,drawCalls:0,triangles:0,textures:0,memory:{// NVX GPU memory (if available)\nused:0,total:0,available:0,// JS heap memory (if available)\njsHeap:{used:0,total:0,limit:0},// WebGL resource counts\nwebgl:{geometries:0,textures:0,programs:0}},gpu:{temperature:null,utilization:null,power:null}};this.frameCount=0;this.lastTime=performance.now();this.frameTimes=[];this.lastRenderNow=0;this.fpsSamples=[];this.dynamicPeakFps=60;// Initialize WebGL extensions for monitoring\nthis.initWebGLExtensions();// Start monitoring\nthis.startMonitoring();}initWebGLExtensions(){// Check for available WebGL extensions\nconst extensions=this.gl.getSupportedExtensions();// Memory info extension (if available)\nif(extensions.includes('WEBGL_debug_renderer_info')){this.debugInfo=this.gl.getExtension('WEBGL_debug_renderer_info');}// Performance extension (if available)\nif(extensions.includes('EXT_disjoint_timer_query')){this.timerQuery=this.gl.getExtension('EXT_disjoint_timer_query');}// Memory info extension (if available)\nif(extensions.includes('WEBGL_lose_context')){this.loseContext=this.gl.getExtension('WEBGL_lose_context');}// Get GPU information\nthis.getGPUInfo();}getGPUInfo(){try{// Get renderer info\nconst rendererInfo=this.gl.getParameter(this.gl.RENDERER);const vendorInfo=this.gl.getParameter(this.gl.VENDOR);// Get GPU memory info if available (NVX extension constants)\ntry{const GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX=0x9049-0x0002;// 0x9047\nconst GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX=0x904A-0x0002;// 0x9048\nif(this.gl.getParameter){const total=this.gl.getParameter(GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX);const avail=this.gl.getParameter(GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX);if(typeof total==='number'&&typeof avail==='number'){this.stats.memory.total=total;this.stats.memory.available=avail;this.stats.memory.used=Math.max(0,total-avail);}}}catch(_){// ignore if not supported\n}console.log('GPU Info:',{renderer:rendererInfo,vendor:vendorInfo,memory:this.stats.memory});}catch(error){console.warn('Could not get GPU info:',error);}}startMonitoring(){this.monitorLoop();}monitorLoop(){const currentTime=performance.now();// Update WebGL stats\nthis.updateWebGLStats();// Estimate GPU utilization based on frame time and complexity\nthis.estimateGPUUtilization();this.lastTime=currentTime;requestAnimationFrame(()=>this.monitorLoop());}// Call this from the render loop to record actual rendered frame cadence\nonFrameRendered(now){if(!this.lastRenderNow){this.lastRenderNow=now;return;}const delta=now-this.lastRenderNow;this.lastRenderNow=now;// Keep last 60 render frame times\nthis.frameTimes.push(delta);if(this.frameTimes.length>60){this.frameTimes.shift();}const avgFrameTime=this.frameTimes.reduce((a,b)=>a+b,0)/this.frameTimes.length;if(avgFrameTime&&isFinite(avgFrameTime)){this.stats.frameTime=avgFrameTime;this.stats.fps=1000/avgFrameTime;// Track FPS samples for dynamic peak calculation\nthis.fpsSamples.push(this.stats.fps);if(this.fpsSamples.length>120){// ~2s window at 60fps\nthis.fpsSamples.shift();}// Dynamic peak FPS based on recent window\nconst recentPeak=Math.max(...this.fpsSamples);if(isFinite(recentPeak)&&recentPeak>0){this.dynamicPeakFps=recentPeak;}}}updateWebGLStats(){try{// Get current WebGL state\nconst info=this.renderer.info;this.stats.drawCalls=info.render.calls;this.stats.triangles=info.render.triangles;this.stats.textures=info.memory.textures;// WebGL resources\nif(info.memory){this.stats.memory.webgl.geometries=info.memory.geometries||0;this.stats.memory.webgl.textures=info.memory.textures||0;}// Programs length if available\nif(Array.isArray(info.programs)){this.stats.memory.webgl.programs=info.programs.length;}// JS Heap memory (Chrome-only)\nif(performance&&performance.memory){this.stats.memory.jsHeap.used=performance.memory.usedJSHeapSize||0;this.stats.memory.jsHeap.total=performance.memory.totalJSHeapSize||0;this.stats.memory.jsHeap.limit=performance.memory.jsHeapSizeLimit||0;}}catch(error){console.warn('Could not update WebGL stats:',error);}}estimateGPUUtilization(){// Approximate utilization relative to recent peak FPS\n// With an FPS cap, FPS drops but GPU work per frame stays similar, so\n// using relative FPS to recent peak gives a visible utilization change.\nconst fps=Math.max(1,this.stats.fps||0);const peak=Math.max(1,this.dynamicPeakFps||60);const relativeFps=Math.min(1,fps/peak);// 0..1\n// Complexity hint keeps some variation when FPS is steady\nconst complexity=Math.min(1,this.stats.drawCalls/200+this.stats.triangles/500000);let utilization=(relativeFps*0.7+complexity*0.3)*100;utilization=Math.max(5,Math.min(100,utilization));this.stats.gpu.utilization=Math.round(utilization);// Temperature model with softer response\nconst baseTemp=40;// idle baseline\nconst tempSpan=35;// range up to ~75C\nthis.stats.gpu.temperature=baseTemp+tempSpan*(utilization/100);// Power estimate scaled with utilization\nconst baseWatts=15;const dynamicWatts=60;// headroom\nconst darkThemeWatts=this.currentTheme==='dark'?5:0;console.log(this.stats);this.stats.gpu.power=Math.round((baseWatts+dynamicWatts-darkThemeWatts)*(utilization/100));}getStats(){return _objectSpread({},this.stats);}resetStats(){this.frameCount=0;this.frameTimes=[];this.lastTime=performance.now();}destroy(){// Cleanup if needed\n}}","map":{"version":3,"names":["THREE","GPUMonitor","constructor","renderer","gl","getContext","stats","fps","frameTime","drawCalls","triangles","textures","memory","used","total","available","jsHeap","limit","webgl","geometries","programs","gpu","temperature","utilization","power","frameCount","lastTime","performance","now","frameTimes","lastRenderNow","fpsSamples","dynamicPeakFps","initWebGLExtensions","startMonitoring","extensions","getSupportedExtensions","includes","debugInfo","getExtension","timerQuery","loseContext","getGPUInfo","rendererInfo","getParameter","RENDERER","vendorInfo","VENDOR","GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX","GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX","avail","Math","max","_","console","log","vendor","error","warn","monitorLoop","currentTime","updateWebGLStats","estimateGPUUtilization","requestAnimationFrame","onFrameRendered","delta","push","length","shift","avgFrameTime","reduce","a","b","isFinite","recentPeak","info","render","calls","Array","isArray","usedJSHeapSize","totalJSHeapSize","jsHeapSizeLimit","peak","relativeFps","min","complexity","round","baseTemp","tempSpan","baseWatts","dynamicWatts","darkThemeWatts","currentTheme","getStats","_objectSpread","resetStats","destroy"],"sources":["C:/D-Drive/AI For Retail/Sustainability Hackathon FLO 2025/Latest Code/sustainable-ux/src/GPUMonitor.js"],"sourcesContent":["import * as THREE from \"three\";\n\nexport class GPUMonitor {\n  constructor(renderer) {\n    this.renderer = renderer;\n    this.gl = renderer.getContext();\n    this.stats = {\n      fps: 0,\n      frameTime: 0,\n      drawCalls: 0,\n      triangles: 0,\n      textures: 0,\n      memory: {\n        // NVX GPU memory (if available)\n        used: 0,\n        total: 0,\n        available: 0,\n        // JS heap memory (if available)\n        jsHeap: {\n          used: 0,\n          total: 0,\n          limit: 0\n        },\n        // WebGL resource counts\n        webgl: {\n          geometries: 0,\n          textures: 0,\n          programs: 0\n        }\n      },\n      gpu: {\n        temperature: null,\n        utilization: null,\n        power: null\n      }\n    };\n    \n    this.frameCount = 0;\n    this.lastTime = performance.now();\n    this.frameTimes = [];\n    this.lastRenderNow = 0;\n    this.fpsSamples = [];\n    this.dynamicPeakFps = 60;\n    \n    // Initialize WebGL extensions for monitoring\n    this.initWebGLExtensions();\n    \n    // Start monitoring\n    this.startMonitoring();\n  }\n  \n  initWebGLExtensions() {\n    // Check for available WebGL extensions\n    const extensions = this.gl.getSupportedExtensions();\n    \n    // Memory info extension (if available)\n    if (extensions.includes('WEBGL_debug_renderer_info')) {\n      this.debugInfo = this.gl.getExtension('WEBGL_debug_renderer_info');\n    }\n    \n    // Performance extension (if available)\n    if (extensions.includes('EXT_disjoint_timer_query')) {\n      this.timerQuery = this.gl.getExtension('EXT_disjoint_timer_query');\n    }\n    \n    // Memory info extension (if available)\n    if (extensions.includes('WEBGL_lose_context')) {\n      this.loseContext = this.gl.getExtension('WEBGL_lose_context');\n    }\n    \n    // Get GPU information\n    this.getGPUInfo();\n  }\n  \n  getGPUInfo() {\n    try {\n      // Get renderer info\n      const rendererInfo = this.gl.getParameter(this.gl.RENDERER);\n      const vendorInfo = this.gl.getParameter(this.gl.VENDOR);\n      \n      // Get GPU memory info if available (NVX extension constants)\n      try {\n        const GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 0x9049 - 0x0002; // 0x9047\n        const GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 0x904A - 0x0002; // 0x9048\n        if (this.gl.getParameter) {\n          const total = this.gl.getParameter(GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX);\n          const avail = this.gl.getParameter(GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX);\n          if (typeof total === 'number' && typeof avail === 'number') {\n            this.stats.memory.total = total;\n            this.stats.memory.available = avail;\n            this.stats.memory.used = Math.max(0, total - avail);\n          }\n        }\n      } catch (_) {\n        // ignore if not supported\n      }\n      \n      console.log('GPU Info:', {\n        renderer: rendererInfo,\n        vendor: vendorInfo,\n        memory: this.stats.memory\n      });\n      \n    } catch (error) {\n      console.warn('Could not get GPU info:', error);\n    }\n  }\n  \n  startMonitoring() {\n    this.monitorLoop();\n  }\n  \n  monitorLoop() {\n    const currentTime = performance.now();\n    // Update WebGL stats\n    this.updateWebGLStats();\n    \n    // Estimate GPU utilization based on frame time and complexity\n    this.estimateGPUUtilization();\n    \n    this.lastTime = currentTime;\n    \n    requestAnimationFrame(() => this.monitorLoop());\n  }\n\n  // Call this from the render loop to record actual rendered frame cadence\n  onFrameRendered(now) {\n    if (!this.lastRenderNow) {\n      this.lastRenderNow = now;\n      return;\n    }\n    const delta = now - this.lastRenderNow;\n    this.lastRenderNow = now;\n    // Keep last 60 render frame times\n    this.frameTimes.push(delta);\n    if (this.frameTimes.length > 60) {\n      this.frameTimes.shift();\n    }\n    const avgFrameTime = this.frameTimes.reduce((a, b) => a + b, 0) / this.frameTimes.length;\n    if (avgFrameTime && isFinite(avgFrameTime)) {\n      this.stats.frameTime = avgFrameTime;\n      this.stats.fps = 1000 / avgFrameTime;\n      // Track FPS samples for dynamic peak calculation\n      this.fpsSamples.push(this.stats.fps);\n      if (this.fpsSamples.length > 120) { // ~2s window at 60fps\n        this.fpsSamples.shift();\n      }\n      // Dynamic peak FPS based on recent window\n      const recentPeak = Math.max(...this.fpsSamples);\n      if (isFinite(recentPeak) && recentPeak > 0) {\n        this.dynamicPeakFps = recentPeak;\n      }\n    }\n  }\n  \n  updateWebGLStats() {\n    try {\n      // Get current WebGL state\n      const info = this.renderer.info;\n      \n      this.stats.drawCalls = info.render.calls;\n      this.stats.triangles = info.render.triangles;\n      this.stats.textures = info.memory.textures;\n      // WebGL resources\n      if (info.memory) {\n        this.stats.memory.webgl.geometries = info.memory.geometries || 0;\n        this.stats.memory.webgl.textures = info.memory.textures || 0;\n      }\n      // Programs length if available\n      if (Array.isArray(info.programs)) {\n        this.stats.memory.webgl.programs = info.programs.length;\n      }\n      // JS Heap memory (Chrome-only)\n      if (performance && performance.memory) {\n        this.stats.memory.jsHeap.used = performance.memory.usedJSHeapSize || 0;\n        this.stats.memory.jsHeap.total = performance.memory.totalJSHeapSize || 0;\n        this.stats.memory.jsHeap.limit = performance.memory.jsHeapSizeLimit || 0;\n      }\n      \n    } catch (error) {\n      console.warn('Could not update WebGL stats:', error);\n    }\n  }\n  \n  estimateGPUUtilization() {\n    // Approximate utilization relative to recent peak FPS\n    // With an FPS cap, FPS drops but GPU work per frame stays similar, so\n    // using relative FPS to recent peak gives a visible utilization change.\n    const fps = Math.max(1, this.stats.fps || 0);\n    const peak = Math.max(1, this.dynamicPeakFps || 60);\n    const relativeFps = Math.min(1, fps / peak); // 0..1\n    // Complexity hint keeps some variation when FPS is steady\n    const complexity = Math.min(1, (this.stats.drawCalls / 200) + (this.stats.triangles / 500000));\n    let utilization = (relativeFps * 0.7 + complexity * 0.3) * 100;\n    utilization = Math.max(5, Math.min(100, utilization));\n\n    this.stats.gpu.utilization = Math.round(utilization);\n\n    // Temperature model with softer response\n    const baseTemp = 40; // idle baseline\n    const tempSpan = 35; // range up to ~75C\n    this.stats.gpu.temperature = baseTemp + (tempSpan * (utilization / 100));\n\n    // Power estimate scaled with utilization\n    const baseWatts = 15;\n    const dynamicWatts = 60; // headroom\n    const darkThemeWatts = this.currentTheme === 'dark' ? 5 : 0;\n    console.log(this.stats);\n    this.stats.gpu.power = Math.round((baseWatts + dynamicWatts - darkThemeWatts) * (utilization / 100));\n  }\n  \n  getStats() {\n    return { ...this.stats };\n  }\n  \n  resetStats() {\n    this.frameCount = 0;\n    this.frameTimes = [];\n    this.lastTime = performance.now();\n  }\n  \n  destroy() {\n    // Cleanup if needed\n  }\n}"],"mappings":"0KAAA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAE9B,MAAO,MAAM,CAAAC,UAAW,CACtBC,WAAWA,CAACC,QAAQ,CAAE,CACpB,IAAI,CAACA,QAAQ,CAAGA,QAAQ,CACxB,IAAI,CAACC,EAAE,CAAGD,QAAQ,CAACE,UAAU,CAAC,CAAC,CAC/B,IAAI,CAACC,KAAK,CAAG,CACXC,GAAG,CAAE,CAAC,CACNC,SAAS,CAAE,CAAC,CACZC,SAAS,CAAE,CAAC,CACZC,SAAS,CAAE,CAAC,CACZC,QAAQ,CAAE,CAAC,CACXC,MAAM,CAAE,CACN;AACAC,IAAI,CAAE,CAAC,CACPC,KAAK,CAAE,CAAC,CACRC,SAAS,CAAE,CAAC,CACZ;AACAC,MAAM,CAAE,CACNH,IAAI,CAAE,CAAC,CACPC,KAAK,CAAE,CAAC,CACRG,KAAK,CAAE,CACT,CAAC,CACD;AACAC,KAAK,CAAE,CACLC,UAAU,CAAE,CAAC,CACbR,QAAQ,CAAE,CAAC,CACXS,QAAQ,CAAE,CACZ,CACF,CAAC,CACDC,GAAG,CAAE,CACHC,WAAW,CAAE,IAAI,CACjBC,WAAW,CAAE,IAAI,CACjBC,KAAK,CAAE,IACT,CACF,CAAC,CAED,IAAI,CAACC,UAAU,CAAG,CAAC,CACnB,IAAI,CAACC,QAAQ,CAAGC,WAAW,CAACC,GAAG,CAAC,CAAC,CACjC,IAAI,CAACC,UAAU,CAAG,EAAE,CACpB,IAAI,CAACC,aAAa,CAAG,CAAC,CACtB,IAAI,CAACC,UAAU,CAAG,EAAE,CACpB,IAAI,CAACC,cAAc,CAAG,EAAE,CAExB;AACA,IAAI,CAACC,mBAAmB,CAAC,CAAC,CAE1B;AACA,IAAI,CAACC,eAAe,CAAC,CAAC,CACxB,CAEAD,mBAAmBA,CAAA,CAAG,CACpB;AACA,KAAM,CAAAE,UAAU,CAAG,IAAI,CAAC/B,EAAE,CAACgC,sBAAsB,CAAC,CAAC,CAEnD;AACA,GAAID,UAAU,CAACE,QAAQ,CAAC,2BAA2B,CAAC,CAAE,CACpD,IAAI,CAACC,SAAS,CAAG,IAAI,CAAClC,EAAE,CAACmC,YAAY,CAAC,2BAA2B,CAAC,CACpE,CAEA;AACA,GAAIJ,UAAU,CAACE,QAAQ,CAAC,0BAA0B,CAAC,CAAE,CACnD,IAAI,CAACG,UAAU,CAAG,IAAI,CAACpC,EAAE,CAACmC,YAAY,CAAC,0BAA0B,CAAC,CACpE,CAEA;AACA,GAAIJ,UAAU,CAACE,QAAQ,CAAC,oBAAoB,CAAC,CAAE,CAC7C,IAAI,CAACI,WAAW,CAAG,IAAI,CAACrC,EAAE,CAACmC,YAAY,CAAC,oBAAoB,CAAC,CAC/D,CAEA;AACA,IAAI,CAACG,UAAU,CAAC,CAAC,CACnB,CAEAA,UAAUA,CAAA,CAAG,CACX,GAAI,CACF;AACA,KAAM,CAAAC,YAAY,CAAG,IAAI,CAACvC,EAAE,CAACwC,YAAY,CAAC,IAAI,CAACxC,EAAE,CAACyC,QAAQ,CAAC,CAC3D,KAAM,CAAAC,UAAU,CAAG,IAAI,CAAC1C,EAAE,CAACwC,YAAY,CAAC,IAAI,CAACxC,EAAE,CAAC2C,MAAM,CAAC,CAEvD;AACA,GAAI,CACF,KAAM,CAAAC,0CAA0C,CAAG,MAAM,CAAG,MAAM,CAAE;AACpE,KAAM,CAAAC,4CAA4C,CAAG,MAAM,CAAG,MAAM,CAAE;AACtE,GAAI,IAAI,CAAC7C,EAAE,CAACwC,YAAY,CAAE,CACxB,KAAM,CAAA9B,KAAK,CAAG,IAAI,CAACV,EAAE,CAACwC,YAAY,CAACI,0CAA0C,CAAC,CAC9E,KAAM,CAAAE,KAAK,CAAG,IAAI,CAAC9C,EAAE,CAACwC,YAAY,CAACK,4CAA4C,CAAC,CAChF,GAAI,MAAO,CAAAnC,KAAK,GAAK,QAAQ,EAAI,MAAO,CAAAoC,KAAK,GAAK,QAAQ,CAAE,CAC1D,IAAI,CAAC5C,KAAK,CAACM,MAAM,CAACE,KAAK,CAAGA,KAAK,CAC/B,IAAI,CAACR,KAAK,CAACM,MAAM,CAACG,SAAS,CAAGmC,KAAK,CACnC,IAAI,CAAC5C,KAAK,CAACM,MAAM,CAACC,IAAI,CAAGsC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAEtC,KAAK,CAAGoC,KAAK,CAAC,CACrD,CACF,CACF,CAAE,MAAOG,CAAC,CAAE,CACV;AAAA,CAGFC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAE,CACvBpD,QAAQ,CAAEwC,YAAY,CACtBa,MAAM,CAAEV,UAAU,CAClBlC,MAAM,CAAE,IAAI,CAACN,KAAK,CAACM,MACrB,CAAC,CAAC,CAEJ,CAAE,MAAO6C,KAAK,CAAE,CACdH,OAAO,CAACI,IAAI,CAAC,yBAAyB,CAAED,KAAK,CAAC,CAChD,CACF,CAEAvB,eAAeA,CAAA,CAAG,CAChB,IAAI,CAACyB,WAAW,CAAC,CAAC,CACpB,CAEAA,WAAWA,CAAA,CAAG,CACZ,KAAM,CAAAC,WAAW,CAAGjC,WAAW,CAACC,GAAG,CAAC,CAAC,CACrC;AACA,IAAI,CAACiC,gBAAgB,CAAC,CAAC,CAEvB;AACA,IAAI,CAACC,sBAAsB,CAAC,CAAC,CAE7B,IAAI,CAACpC,QAAQ,CAAGkC,WAAW,CAE3BG,qBAAqB,CAAC,IAAM,IAAI,CAACJ,WAAW,CAAC,CAAC,CAAC,CACjD,CAEA;AACAK,eAAeA,CAACpC,GAAG,CAAE,CACnB,GAAI,CAAC,IAAI,CAACE,aAAa,CAAE,CACvB,IAAI,CAACA,aAAa,CAAGF,GAAG,CACxB,OACF,CACA,KAAM,CAAAqC,KAAK,CAAGrC,GAAG,CAAG,IAAI,CAACE,aAAa,CACtC,IAAI,CAACA,aAAa,CAAGF,GAAG,CACxB;AACA,IAAI,CAACC,UAAU,CAACqC,IAAI,CAACD,KAAK,CAAC,CAC3B,GAAI,IAAI,CAACpC,UAAU,CAACsC,MAAM,CAAG,EAAE,CAAE,CAC/B,IAAI,CAACtC,UAAU,CAACuC,KAAK,CAAC,CAAC,CACzB,CACA,KAAM,CAAAC,YAAY,CAAG,IAAI,CAACxC,UAAU,CAACyC,MAAM,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKD,CAAC,CAAGC,CAAC,CAAE,CAAC,CAAC,CAAG,IAAI,CAAC3C,UAAU,CAACsC,MAAM,CACxF,GAAIE,YAAY,EAAII,QAAQ,CAACJ,YAAY,CAAC,CAAE,CAC1C,IAAI,CAAC/D,KAAK,CAACE,SAAS,CAAG6D,YAAY,CACnC,IAAI,CAAC/D,KAAK,CAACC,GAAG,CAAG,IAAI,CAAG8D,YAAY,CACpC;AACA,IAAI,CAACtC,UAAU,CAACmC,IAAI,CAAC,IAAI,CAAC5D,KAAK,CAACC,GAAG,CAAC,CACpC,GAAI,IAAI,CAACwB,UAAU,CAACoC,MAAM,CAAG,GAAG,CAAE,CAAE;AAClC,IAAI,CAACpC,UAAU,CAACqC,KAAK,CAAC,CAAC,CACzB,CACA;AACA,KAAM,CAAAM,UAAU,CAAGvB,IAAI,CAACC,GAAG,CAAC,GAAG,IAAI,CAACrB,UAAU,CAAC,CAC/C,GAAI0C,QAAQ,CAACC,UAAU,CAAC,EAAIA,UAAU,CAAG,CAAC,CAAE,CAC1C,IAAI,CAAC1C,cAAc,CAAG0C,UAAU,CAClC,CACF,CACF,CAEAb,gBAAgBA,CAAA,CAAG,CACjB,GAAI,CACF;AACA,KAAM,CAAAc,IAAI,CAAG,IAAI,CAACxE,QAAQ,CAACwE,IAAI,CAE/B,IAAI,CAACrE,KAAK,CAACG,SAAS,CAAGkE,IAAI,CAACC,MAAM,CAACC,KAAK,CACxC,IAAI,CAACvE,KAAK,CAACI,SAAS,CAAGiE,IAAI,CAACC,MAAM,CAAClE,SAAS,CAC5C,IAAI,CAACJ,KAAK,CAACK,QAAQ,CAAGgE,IAAI,CAAC/D,MAAM,CAACD,QAAQ,CAC1C;AACA,GAAIgE,IAAI,CAAC/D,MAAM,CAAE,CACf,IAAI,CAACN,KAAK,CAACM,MAAM,CAACM,KAAK,CAACC,UAAU,CAAGwD,IAAI,CAAC/D,MAAM,CAACO,UAAU,EAAI,CAAC,CAChE,IAAI,CAACb,KAAK,CAACM,MAAM,CAACM,KAAK,CAACP,QAAQ,CAAGgE,IAAI,CAAC/D,MAAM,CAACD,QAAQ,EAAI,CAAC,CAC9D,CACA;AACA,GAAImE,KAAK,CAACC,OAAO,CAACJ,IAAI,CAACvD,QAAQ,CAAC,CAAE,CAChC,IAAI,CAACd,KAAK,CAACM,MAAM,CAACM,KAAK,CAACE,QAAQ,CAAGuD,IAAI,CAACvD,QAAQ,CAAC+C,MAAM,CACzD,CACA;AACA,GAAIxC,WAAW,EAAIA,WAAW,CAACf,MAAM,CAAE,CACrC,IAAI,CAACN,KAAK,CAACM,MAAM,CAACI,MAAM,CAACH,IAAI,CAAGc,WAAW,CAACf,MAAM,CAACoE,cAAc,EAAI,CAAC,CACtE,IAAI,CAAC1E,KAAK,CAACM,MAAM,CAACI,MAAM,CAACF,KAAK,CAAGa,WAAW,CAACf,MAAM,CAACqE,eAAe,EAAI,CAAC,CACxE,IAAI,CAAC3E,KAAK,CAACM,MAAM,CAACI,MAAM,CAACC,KAAK,CAAGU,WAAW,CAACf,MAAM,CAACsE,eAAe,EAAI,CAAC,CAC1E,CAEF,CAAE,MAAOzB,KAAK,CAAE,CACdH,OAAO,CAACI,IAAI,CAAC,+BAA+B,CAAED,KAAK,CAAC,CACtD,CACF,CAEAK,sBAAsBA,CAAA,CAAG,CACvB;AACA;AACA;AACA,KAAM,CAAAvD,GAAG,CAAG4C,IAAI,CAACC,GAAG,CAAC,CAAC,CAAE,IAAI,CAAC9C,KAAK,CAACC,GAAG,EAAI,CAAC,CAAC,CAC5C,KAAM,CAAA4E,IAAI,CAAGhC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAE,IAAI,CAACpB,cAAc,EAAI,EAAE,CAAC,CACnD,KAAM,CAAAoD,WAAW,CAAGjC,IAAI,CAACkC,GAAG,CAAC,CAAC,CAAE9E,GAAG,CAAG4E,IAAI,CAAC,CAAE;AAC7C;AACA,KAAM,CAAAG,UAAU,CAAGnC,IAAI,CAACkC,GAAG,CAAC,CAAC,CAAG,IAAI,CAAC/E,KAAK,CAACG,SAAS,CAAG,GAAG,CAAK,IAAI,CAACH,KAAK,CAACI,SAAS,CAAG,MAAO,CAAC,CAC9F,GAAI,CAAAa,WAAW,CAAG,CAAC6D,WAAW,CAAG,GAAG,CAAGE,UAAU,CAAG,GAAG,EAAI,GAAG,CAC9D/D,WAAW,CAAG4B,IAAI,CAACC,GAAG,CAAC,CAAC,CAAED,IAAI,CAACkC,GAAG,CAAC,GAAG,CAAE9D,WAAW,CAAC,CAAC,CAErD,IAAI,CAACjB,KAAK,CAACe,GAAG,CAACE,WAAW,CAAG4B,IAAI,CAACoC,KAAK,CAAChE,WAAW,CAAC,CAEpD;AACA,KAAM,CAAAiE,QAAQ,CAAG,EAAE,CAAE;AACrB,KAAM,CAAAC,QAAQ,CAAG,EAAE,CAAE;AACrB,IAAI,CAACnF,KAAK,CAACe,GAAG,CAACC,WAAW,CAAGkE,QAAQ,CAAIC,QAAQ,EAAIlE,WAAW,CAAG,GAAG,CAAE,CAExE;AACA,KAAM,CAAAmE,SAAS,CAAG,EAAE,CACpB,KAAM,CAAAC,YAAY,CAAG,EAAE,CAAE;AACzB,KAAM,CAAAC,cAAc,CAAG,IAAI,CAACC,YAAY,GAAK,MAAM,CAAG,CAAC,CAAG,CAAC,CAC3DvC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACjD,KAAK,CAAC,CACvB,IAAI,CAACA,KAAK,CAACe,GAAG,CAACG,KAAK,CAAG2B,IAAI,CAACoC,KAAK,CAAC,CAACG,SAAS,CAAGC,YAAY,CAAGC,cAAc,GAAKrE,WAAW,CAAG,GAAG,CAAC,CAAC,CACtG,CAEAuE,QAAQA,CAAA,CAAG,CACT,OAAAC,aAAA,IAAY,IAAI,CAACzF,KAAK,EACxB,CAEA0F,UAAUA,CAAA,CAAG,CACX,IAAI,CAACvE,UAAU,CAAG,CAAC,CACnB,IAAI,CAACI,UAAU,CAAG,EAAE,CACpB,IAAI,CAACH,QAAQ,CAAGC,WAAW,CAACC,GAAG,CAAC,CAAC,CACnC,CAEAqE,OAAOA,CAAA,CAAG,CACR;AAAA,CAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}