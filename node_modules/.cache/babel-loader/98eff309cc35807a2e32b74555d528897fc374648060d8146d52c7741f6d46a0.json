{"ast":null,"code":"import * as THREE from \"three\";\nexport class GPUMonitor {\n  constructor(renderer) {\n    this.renderer = renderer;\n    this.gl = renderer.getContext();\n    this.stats = {\n      fps: 0,\n      frameTime: 0,\n      drawCalls: 0,\n      triangles: 0,\n      textures: 0,\n      memory: {\n        // NVX GPU memory (if available)\n        used: 0,\n        total: 0,\n        available: 0,\n        // JS heap memory (if available)\n        jsHeap: {\n          used: 0,\n          total: 0,\n          limit: 0\n        },\n        // WebGL resource counts\n        webgl: {\n          geometries: 0,\n          textures: 0,\n          programs: 0\n        }\n      },\n      gpu: {\n        temperature: null,\n        utilization: null,\n        power: null\n      }\n    };\n    this.frameCount = 0;\n    this.lastTime = performance.now();\n    this.frameTimes = [];\n    this.lastRenderNow = 0;\n    this.fpsSamples = [];\n    this.dynamicPeakFps = 60;\n\n    // Initialize WebGL extensions for monitoring\n    this.initWebGLExtensions();\n\n    // Start monitoring\n    this.startMonitoring();\n  }\n  initWebGLExtensions() {\n    // Check for available WebGL extensions\n    const extensions = this.gl.getSupportedExtensions();\n\n    // Memory info extension (if available)\n    if (extensions.includes('WEBGL_debug_renderer_info')) {\n      this.debugInfo = this.gl.getExtension('WEBGL_debug_renderer_info');\n    }\n\n    // Performance extension (if available)\n    if (extensions.includes('EXT_disjoint_timer_query')) {\n      this.timerQuery = this.gl.getExtension('EXT_disjoint_timer_query');\n    }\n\n    // Memory info extension (if available)\n    if (extensions.includes('WEBGL_lose_context')) {\n      this.loseContext = this.gl.getExtension('WEBGL_lose_context');\n    }\n\n    // Get GPU information\n    this.getGPUInfo();\n  }\n  getGPUInfo() {\n    try {\n      // Get renderer info\n      const rendererInfo = this.gl.getParameter(this.gl.RENDERER);\n      const vendorInfo = this.gl.getParameter(this.gl.VENDOR);\n\n      // Get GPU memory info if available (NVX extension constants)\n      try {\n        const GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 0x9049 - 0x0002; // 0x9047\n        const GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 0x904A - 0x0002; // 0x9048\n        if (this.gl.getParameter) {\n          const total = this.gl.getParameter(GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX);\n          const avail = this.gl.getParameter(GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX);\n          if (typeof total === 'number' && typeof avail === 'number') {\n            this.stats.memory.total = total;\n            this.stats.memory.available = avail;\n            this.stats.memory.used = Math.max(0, total - avail);\n          }\n        }\n      } catch (_) {\n        // ignore if not supported\n      }\n      console.log('GPU Info:', {\n        renderer: rendererInfo,\n        vendor: vendorInfo,\n        memory: this.stats.memory\n      });\n    } catch (error) {\n      console.warn('Could not get GPU info:', error);\n    }\n  }\n  startMonitoring() {\n    this.monitorLoop();\n  }\n  monitorLoop() {\n    const currentTime = performance.now();\n    // Update WebGL stats\n    this.updateWebGLStats();\n\n    // Estimate GPU utilization based on frame time and complexity\n    this.estimateGPUUtilization();\n    this.lastTime = currentTime;\n    requestAnimationFrame(() => this.monitorLoop());\n  }\n\n  // Call this from the render loop to record actual rendered frame cadence\n  onFrameRendered(now) {\n    if (!this.lastRenderNow) {\n      this.lastRenderNow = now;\n      return;\n    }\n    const delta = now - this.lastRenderNow;\n    this.lastRenderNow = now;\n    // Keep last 60 render frame times\n    this.frameTimes.push(delta);\n    if (this.frameTimes.length > 60) {\n      this.frameTimes.shift();\n    }\n    const avgFrameTime = this.frameTimes.reduce((a, b) => a + b, 0) / this.frameTimes.length;\n    if (avgFrameTime && isFinite(avgFrameTime)) {\n      this.stats.frameTime = avgFrameTime;\n      this.stats.fps = 1000 / avgFrameTime;\n      // Track FPS samples for dynamic peak calculation\n      this.fpsSamples.push(this.stats.fps);\n      if (this.fpsSamples.length > 120) {\n        // ~2s window at 60fps\n        this.fpsSamples.shift();\n      }\n      // Dynamic peak FPS based on recent window\n      const recentPeak = Math.max(...this.fpsSamples);\n      if (isFinite(recentPeak) && recentPeak > 0) {\n        this.dynamicPeakFps = recentPeak;\n      }\n    }\n  }\n  updateWebGLStats() {\n    try {\n      // Get current WebGL state\n      const info = this.renderer.info;\n      this.stats.drawCalls = info.render.calls;\n      this.stats.triangles = info.render.triangles;\n      this.stats.textures = info.memory.textures;\n      // WebGL resources\n      if (info.memory) {\n        this.stats.memory.webgl.geometries = info.memory.geometries || 0;\n        this.stats.memory.webgl.textures = info.memory.textures || 0;\n      }\n      // Programs length if available\n      if (Array.isArray(info.programs)) {\n        this.stats.memory.webgl.programs = info.programs.length;\n      }\n      // JS Heap memory (Chrome-only)\n      if (performance && performance.memory) {\n        this.stats.memory.jsHeap.used = performance.memory.usedJSHeapSize || 0;\n        this.stats.memory.jsHeap.total = performance.memory.totalJSHeapSize || 0;\n        this.stats.memory.jsHeap.limit = performance.memory.jsHeapSizeLimit || 0;\n      }\n    } catch (error) {\n      console.warn('Could not update WebGL stats:', error);\n    }\n  }\n  estimateGPUUtilization() {\n    // Approximate utilization relative to recent peak FPS\n    // With an FPS cap, FPS drops but GPU work per frame stays similar, so\n    // using relative FPS to recent peak gives a visible utilization change.\n    const fps = Math.max(1, this.stats.fps || 0);\n    const peak = Math.max(1, this.dynamicPeakFps || 60);\n    const relativeFps = Math.min(1, fps / peak); // 0..1\n    // Complexity hint keeps some variation when FPS is steady\n    const complexity = Math.min(1, this.stats.drawCalls / 200 + this.stats.triangles / 500000);\n    let utilization = (relativeFps * 0.7 + complexity * 0.3) * 100;\n    utilization = Math.max(5, Math.min(100, utilization));\n    this.stats.gpu.utilization = Math.round(utilization);\n\n    // Temperature model with softer response\n    const baseTemp = 40; // idle baseline\n    const tempSpan = 35; // range up to ~75C\n    this.stats.gpu.temperature = baseTemp + tempSpan * (utilization / 100);\n\n    // Power estimate scaled with utilization\n    const baseWatts = 15;\n    const dynamicWatts = 60; // headroom\n    const darkThemeWatts = this.currentTheme === 'dark' ? 5 : 0;\n    console.log(this.stats);\n    this.stats.gpu.power = Math.round((baseWatts + dynamicWatts - darkThemeWatts) * (utilization / 100));\n  }\n  getStats() {\n    return {\n      ...this.stats\n    };\n  }\n  resetStats() {\n    this.frameCount = 0;\n    this.frameTimes = [];\n    this.lastTime = performance.now();\n  }\n  destroy() {\n    // Cleanup if needed\n  }\n}","map":{"version":3,"names":["THREE","GPUMonitor","constructor","renderer","gl","getContext","stats","fps","frameTime","drawCalls","triangles","textures","memory","used","total","available","jsHeap","limit","webgl","geometries","programs","gpu","temperature","utilization","power","frameCount","lastTime","performance","now","frameTimes","lastRenderNow","fpsSamples","dynamicPeakFps","initWebGLExtensions","startMonitoring","extensions","getSupportedExtensions","includes","debugInfo","getExtension","timerQuery","loseContext","getGPUInfo","rendererInfo","getParameter","RENDERER","vendorInfo","VENDOR","GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX","GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX","avail","Math","max","_","console","log","vendor","error","warn","monitorLoop","currentTime","updateWebGLStats","estimateGPUUtilization","requestAnimationFrame","onFrameRendered","delta","push","length","shift","avgFrameTime","reduce","a","b","isFinite","recentPeak","info","render","calls","Array","isArray","usedJSHeapSize","totalJSHeapSize","jsHeapSizeLimit","peak","relativeFps","min","complexity","round","baseTemp","tempSpan","baseWatts","dynamicWatts","darkThemeWatts","currentTheme","getStats","resetStats","destroy"],"sources":["C:/D-Drive/AI For Retail/Sustainability Hackathon FLO 2025/Latest Code/sustainable-ux/src/GPUMonitor.js"],"sourcesContent":["import * as THREE from \"three\";\n\nexport class GPUMonitor {\n  constructor(renderer) {\n    this.renderer = renderer;\n    this.gl = renderer.getContext();\n    this.stats = {\n      fps: 0,\n      frameTime: 0,\n      drawCalls: 0,\n      triangles: 0,\n      textures: 0,\n      memory: {\n        // NVX GPU memory (if available)\n        used: 0,\n        total: 0,\n        available: 0,\n        // JS heap memory (if available)\n        jsHeap: {\n          used: 0,\n          total: 0,\n          limit: 0\n        },\n        // WebGL resource counts\n        webgl: {\n          geometries: 0,\n          textures: 0,\n          programs: 0\n        }\n      },\n      gpu: {\n        temperature: null,\n        utilization: null,\n        power: null\n      }\n    };\n    \n    this.frameCount = 0;\n    this.lastTime = performance.now();\n    this.frameTimes = [];\n    this.lastRenderNow = 0;\n    this.fpsSamples = [];\n    this.dynamicPeakFps = 60;\n    \n    // Initialize WebGL extensions for monitoring\n    this.initWebGLExtensions();\n    \n    // Start monitoring\n    this.startMonitoring();\n  }\n  \n  initWebGLExtensions() {\n    // Check for available WebGL extensions\n    const extensions = this.gl.getSupportedExtensions();\n    \n    // Memory info extension (if available)\n    if (extensions.includes('WEBGL_debug_renderer_info')) {\n      this.debugInfo = this.gl.getExtension('WEBGL_debug_renderer_info');\n    }\n    \n    // Performance extension (if available)\n    if (extensions.includes('EXT_disjoint_timer_query')) {\n      this.timerQuery = this.gl.getExtension('EXT_disjoint_timer_query');\n    }\n    \n    // Memory info extension (if available)\n    if (extensions.includes('WEBGL_lose_context')) {\n      this.loseContext = this.gl.getExtension('WEBGL_lose_context');\n    }\n    \n    // Get GPU information\n    this.getGPUInfo();\n  }\n  \n  getGPUInfo() {\n    try {\n      // Get renderer info\n      const rendererInfo = this.gl.getParameter(this.gl.RENDERER);\n      const vendorInfo = this.gl.getParameter(this.gl.VENDOR);\n      \n      // Get GPU memory info if available (NVX extension constants)\n      try {\n        const GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 0x9049 - 0x0002; // 0x9047\n        const GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 0x904A - 0x0002; // 0x9048\n        if (this.gl.getParameter) {\n          const total = this.gl.getParameter(GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX);\n          const avail = this.gl.getParameter(GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX);\n          if (typeof total === 'number' && typeof avail === 'number') {\n            this.stats.memory.total = total;\n            this.stats.memory.available = avail;\n            this.stats.memory.used = Math.max(0, total - avail);\n          }\n        }\n      } catch (_) {\n        // ignore if not supported\n      }\n      \n      console.log('GPU Info:', {\n        renderer: rendererInfo,\n        vendor: vendorInfo,\n        memory: this.stats.memory\n      });\n      \n    } catch (error) {\n      console.warn('Could not get GPU info:', error);\n    }\n  }\n  \n  startMonitoring() {\n    this.monitorLoop();\n  }\n  \n  monitorLoop() {\n    const currentTime = performance.now();\n    // Update WebGL stats\n    this.updateWebGLStats();\n    \n    // Estimate GPU utilization based on frame time and complexity\n    this.estimateGPUUtilization();\n    \n    this.lastTime = currentTime;\n    \n    requestAnimationFrame(() => this.monitorLoop());\n  }\n\n  // Call this from the render loop to record actual rendered frame cadence\n  onFrameRendered(now) {\n    if (!this.lastRenderNow) {\n      this.lastRenderNow = now;\n      return;\n    }\n    const delta = now - this.lastRenderNow;\n    this.lastRenderNow = now;\n    // Keep last 60 render frame times\n    this.frameTimes.push(delta);\n    if (this.frameTimes.length > 60) {\n      this.frameTimes.shift();\n    }\n    const avgFrameTime = this.frameTimes.reduce((a, b) => a + b, 0) / this.frameTimes.length;\n    if (avgFrameTime && isFinite(avgFrameTime)) {\n      this.stats.frameTime = avgFrameTime;\n      this.stats.fps = 1000 / avgFrameTime;\n      // Track FPS samples for dynamic peak calculation\n      this.fpsSamples.push(this.stats.fps);\n      if (this.fpsSamples.length > 120) { // ~2s window at 60fps\n        this.fpsSamples.shift();\n      }\n      // Dynamic peak FPS based on recent window\n      const recentPeak = Math.max(...this.fpsSamples);\n      if (isFinite(recentPeak) && recentPeak > 0) {\n        this.dynamicPeakFps = recentPeak;\n      }\n    }\n  }\n  \n  updateWebGLStats() {\n    try {\n      // Get current WebGL state\n      const info = this.renderer.info;\n      \n      this.stats.drawCalls = info.render.calls;\n      this.stats.triangles = info.render.triangles;\n      this.stats.textures = info.memory.textures;\n      // WebGL resources\n      if (info.memory) {\n        this.stats.memory.webgl.geometries = info.memory.geometries || 0;\n        this.stats.memory.webgl.textures = info.memory.textures || 0;\n      }\n      // Programs length if available\n      if (Array.isArray(info.programs)) {\n        this.stats.memory.webgl.programs = info.programs.length;\n      }\n      // JS Heap memory (Chrome-only)\n      if (performance && performance.memory) {\n        this.stats.memory.jsHeap.used = performance.memory.usedJSHeapSize || 0;\n        this.stats.memory.jsHeap.total = performance.memory.totalJSHeapSize || 0;\n        this.stats.memory.jsHeap.limit = performance.memory.jsHeapSizeLimit || 0;\n      }\n      \n    } catch (error) {\n      console.warn('Could not update WebGL stats:', error);\n    }\n  }\n  \n  estimateGPUUtilization() {\n    // Approximate utilization relative to recent peak FPS\n    // With an FPS cap, FPS drops but GPU work per frame stays similar, so\n    // using relative FPS to recent peak gives a visible utilization change.\n    const fps = Math.max(1, this.stats.fps || 0);\n    const peak = Math.max(1, this.dynamicPeakFps || 60);\n    const relativeFps = Math.min(1, fps / peak); // 0..1\n    // Complexity hint keeps some variation when FPS is steady\n    const complexity = Math.min(1, (this.stats.drawCalls / 200) + (this.stats.triangles / 500000));\n    let utilization = (relativeFps * 0.7 + complexity * 0.3) * 100;\n    utilization = Math.max(5, Math.min(100, utilization));\n\n    this.stats.gpu.utilization = Math.round(utilization);\n\n    // Temperature model with softer response\n    const baseTemp = 40; // idle baseline\n    const tempSpan = 35; // range up to ~75C\n    this.stats.gpu.temperature = baseTemp + (tempSpan * (utilization / 100));\n\n    // Power estimate scaled with utilization\n    const baseWatts = 15;\n    const dynamicWatts = 60; // headroom\n    const darkThemeWatts = this.currentTheme === 'dark' ? 5 : 0;\n    console.log(this.stats);\n    this.stats.gpu.power = Math.round((baseWatts + dynamicWatts - darkThemeWatts) * (utilization / 100));\n  }\n  \n  getStats() {\n    return { ...this.stats };\n  }\n  \n  resetStats() {\n    this.frameCount = 0;\n    this.frameTimes = [];\n    this.lastTime = performance.now();\n  }\n  \n  destroy() {\n    // Cleanup if needed\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}