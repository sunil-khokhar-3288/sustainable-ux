{"ast":null,"code":"var _jsxFileName = \"C:\\\\D-Drive\\\\AI For Retail\\\\Sustainability Hackathon FLO 2025\\\\Latest Code\\\\sustainable-ux\\\\src\\\\ThreeSceneWithGPU.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { createModelScene } from './ThreeDModelScene';\nimport { GPUStatsDisplay, GPUStatsToggle } from './GPUStatsDisplay';\nimport { GPUStressTest, StressTestControls } from './GPUStressTest';\nimport GPUDashboard from './GPUDashboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ThreeSceneWithGPU() {\n  _s();\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n  const [gpuMonitor, setGpuMonitor] = useState(null);\n  const [stressTest, setStressTest] = useState(null);\n  const [showStats, setShowStats] = useState(true);\n  const [isStressTestRunning, setIsStressTestRunning] = useState(false);\n  const [mode, setMode] = useState('optimized');\n  const [theme, setTheme] = useState('light');\n  const [pixelRatioClamp, setPixelRatioClamp] = useState(1.5);\n  const [viewportScale, setViewportScale] = useState(1.0);\n  const [targetFps, setTargetFps] = useState(30);\n  const [backgroundFps, setBackgroundFps] = useState(5);\n  const getOptimizationInfo = () => {\n    return mode === 'optimized' ? {\n      fpsCap: 30,\n      pixelRatioMax: 1.5,\n      powerPreference: 'low-power',\n      antialias: false,\n      pauseOnHidden: true\n    } : {\n      fpsCap: 60,\n      pixelRatioMax: 3,\n      powerPreference: 'default/hi-perf',\n      antialias: false,\n      pauseOnHidden: true\n    };\n  };\n  const [baselineAvg, setBaselineAvg] = useState(null);\n  const [optimizedAvg, setOptimizedAvg] = useState(null);\n  const [baselinePowerAvg, setBaselinePowerAvg] = useState(null);\n  const [optimizedPowerAvg, setOptimizedPowerAvg] = useState(null);\n  const [showDashboard, setShowDashboard] = useState(true);\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Create the Three.js scene\n    const {\n      cleanup,\n      gpuMonitor: monitor,\n      scene,\n      renderer,\n      setPerformanceMode,\n      setTargetFps: setTfps,\n      setBackgroundFps: setBfps,\n      setPixelRatioClamp,\n      setViewportScale,\n      setTheme: setSceneTheme,\n      getCurrentSettings,\n      currentTheme\n    } = createModelScene(mountRef.current);\n    sceneRef.current = {\n      cleanup,\n      scene,\n      renderer,\n      setPerformanceMode,\n      setTfps,\n      setBfps,\n      setPixelRatioClamp,\n      setViewportScale,\n      setSceneTheme,\n      getCurrentSettings\n    };\n    setGpuMonitor(monitor);\n\n    // Initialize stress test\n    const test = new GPUStressTest(scene, renderer);\n    setStressTest(test);\n    return () => {\n      if (sceneRef.current) {\n        test.stopStressTest();\n        sceneRef.current.cleanup();\n      }\n    };\n  }, []);\n  const toggleStressTest = () => {\n    if (!stressTest) return;\n    if (isStressTestRunning) {\n      stressTest.stopStressTest();\n      setIsStressTestRunning(false);\n    } else {\n      stressTest.startStressTest(50);\n      setIsStressTestRunning(true);\n    }\n  };\n  const handleIntensityChange = intensity => {\n    if (stressTest) {\n      stressTest.adjustIntensity(intensity);\n    }\n  };\n  const toggleMode = async () => {\n    if (!sceneRef.current) return;\n    const next = mode === 'optimized' ? 'baseline' : 'optimized';\n    sceneRef.current.setPerformanceMode(next);\n    setMode(next);\n  };\n\n  // Sync scene controls when local states change\n  useEffect(() => {\n    var _sceneRef$current$set, _sceneRef$current;\n    if (!sceneRef.current) return;\n    (_sceneRef$current$set = (_sceneRef$current = sceneRef.current).setSceneTheme) === null || _sceneRef$current$set === void 0 ? void 0 : _sceneRef$current$set.call(_sceneRef$current, theme);\n  }, [theme]);\n  useEffect(() => {\n    var _sceneRef$current$set2, _sceneRef$current2;\n    if (!sceneRef.current) return;\n    (_sceneRef$current$set2 = (_sceneRef$current2 = sceneRef.current).setTfps) === null || _sceneRef$current$set2 === void 0 ? void 0 : _sceneRef$current$set2.call(_sceneRef$current2, targetFps);\n  }, [targetFps]);\n  useEffect(() => {\n    var _sceneRef$current$set3, _sceneRef$current3;\n    if (!sceneRef.current) return;\n    (_sceneRef$current$set3 = (_sceneRef$current3 = sceneRef.current).setBfps) === null || _sceneRef$current$set3 === void 0 ? void 0 : _sceneRef$current$set3.call(_sceneRef$current3, backgroundFps);\n  }, [backgroundFps]);\n  useEffect(() => {\n    var _sceneRef$current$set4, _sceneRef$current4;\n    if (!sceneRef.current) return;\n    (_sceneRef$current$set4 = (_sceneRef$current4 = sceneRef.current).setPixelRatioClamp) === null || _sceneRef$current$set4 === void 0 ? void 0 : _sceneRef$current$set4.call(_sceneRef$current4, pixelRatioClamp);\n  }, [pixelRatioClamp]);\n  useEffect(() => {\n    var _sceneRef$current$set5, _sceneRef$current5;\n    if (!sceneRef.current) return;\n    (_sceneRef$current$set5 = (_sceneRef$current5 = sceneRef.current).setViewportScale) === null || _sceneRef$current$set5 === void 0 ? void 0 : _sceneRef$current$set5.call(_sceneRef$current5, viewportScale);\n  }, [viewportScale]);\n\n  // Measure averages over a window\n  const measureAverages = (windowMs = 2000) => new Promise(resolve => {\n    if (!gpuMonitor) return resolve(null);\n    const utilSamples = [];\n    const powerSamples = [];\n    const start = performance.now();\n    const timer = setInterval(() => {\n      const s = gpuMonitor.getStats();\n      utilSamples.push(s.gpu.utilization);\n      powerSamples.push(s.gpu.power);\n      if (performance.now() - start >= windowMs) {\n        clearInterval(timer);\n        const avgUtil = utilSamples.reduce((a, b) => a + b, 0) / utilSamples.length || 0;\n        const avgPower = powerSamples.reduce((a, b) => a + b, 0) / powerSamples.length || 0;\n        resolve({\n          utilization: Math.round(avgUtil),\n          power: Math.round(avgPower)\n        });\n      }\n    }, 100);\n  });\n  const runComparison = async () => {\n    if (!sceneRef.current) return;\n    // Baseline\n    sceneRef.current.setPerformanceMode('baseline');\n    await new Promise(r => setTimeout(r, 300));\n    const base = await measureAverages(2000);\n    setBaselineAvg(base ? base.utilization : null);\n    setBaselinePowerAvg(base ? base.power : null);\n    // Optimized\n    sceneRef.current.setPerformanceMode('optimized');\n    await new Promise(r => setTimeout(r, 300));\n    const opt = await measureAverages(2000);\n    setOptimizedAvg(opt ? opt.utilization : null);\n    setOptimizedPowerAvg(opt ? opt.power : null);\n    setMode('optimized');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: '100%',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mountRef,\n      style: {\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GPUStatsToggle, {\n      onToggle: setShowStats\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setShowDashboard(true),\n      style: {\n        position: 'fixed',\n        right: '16px',\n        bottom: '16px',\n        background: 'linear-gradient(135deg,rgb(238, 245, 241),rgb(231, 241, 224))',\n        color: '#0b0b0b',\n        border: 'none',\n        padding: '12px 16px',\n        borderRadius: '999px',\n        cursor: 'pointer',\n        fontFamily: 'monospace',\n        fontSize: '13px',\n        zIndex: 1100,\n        boxShadow: '0 12px 24px rgba(0,0,0,0.35)'\n      },\n      children: \"Open Sustainability Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), showStats && gpuMonitor && /*#__PURE__*/_jsxDEV(GPUStatsDisplay, {\n      gpuMonitor: gpuMonitor,\n      mode: mode,\n      optimizationInfo: getOptimizationInfo(),\n      hasComparison: baselineAvg !== null || optimizedAvg !== null,\n      extraControls: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          gap: '6px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: '8px',\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleMode,\n            style: {\n              padding: '6px 10px'\n            },\n            children: [\"Mode: \", mode === 'optimized' ? 'Optimized' : 'Baseline']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: runComparison,\n            style: {\n              padding: '6px 10px'\n            },\n            children: \"Compare (2s each)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setShowDashboard(v => !v),\n            style: {\n              padding: '6px 10px'\n            },\n            children: [showDashboard ? 'Hide' : 'Show', \" Dashboard\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 17\n          }, this), (baselineAvg !== null || optimizedAvg !== null) && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '11px'\n            },\n            children: [\"Baseline: \", baselineAvg !== null && baselineAvg !== void 0 ? baselineAvg : '-', \"% | Optimized: \", optimizedAvg !== null && optimizedAvg !== void 0 ? optimizedAvg : '-', \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'grid',\n            gridTemplateColumns: '1fr 1fr',\n            gap: 8\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              flexDirection: 'column',\n              gap: 6\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              style: {\n                fontSize: 11\n              },\n              children: \"Theme\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: theme,\n              onChange: e => setTheme(e.target.value),\n              style: {\n                padding: '4px 6px',\n                fontSize: 12\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"dark\",\n                children: \"Dark (energy-friendly)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"light\",\n                children: \"Light\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"oled\",\n                children: \"OLED (pure black)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"eink\",\n                children: \"E-Ink (grayscale)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"high-contrast\",\n                children: \"High Contrast\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              flexDirection: 'column',\n              gap: 6\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              style: {\n                fontSize: 11\n              },\n              children: [\"Target FPS: \", targetFps]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"15\",\n              max: \"60\",\n              value: targetFps,\n              onChange: e => setTargetFps(parseInt(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              flexDirection: 'column',\n              gap: 6\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              style: {\n                fontSize: 11\n              },\n              children: [\"Background FPS: \", backgroundFps]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"1\",\n              max: \"15\",\n              value: backgroundFps,\n              onChange: e => setBackgroundFps(parseInt(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              flexDirection: 'column',\n              gap: 6\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              style: {\n                fontSize: 11\n              },\n              children: [\"Pixel Ratio Clamp: \", pixelRatioClamp.toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"0.5\",\n              max: \"3\",\n              step: \"0.1\",\n              value: pixelRatioClamp,\n              onChange: e => setPixelRatioClamp(parseFloat(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              flexDirection: 'column',\n              gap: 6\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              style: {\n                fontSize: 11\n              },\n              children: [\"Viewport Scale: \", (viewportScale * 100).toFixed(0), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"0.3\",\n              max: \"1\",\n              step: \"0.05\",\n              value: viewportScale,\n              onChange: e => setViewportScale(parseFloat(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 15\n        }, this), baselinePowerAvg !== null && optimizedPowerAvg !== null && (() => {\n          const wattsSaved = Math.max(0, baselinePowerAvg - optimizedPowerAvg);\n          const gramsPerWh = 0.4; // 400 g/kWh\n          const gramsPerHour = Math.round(wattsSaved * gramsPerWh);\n          const pct = baselinePowerAvg > 0 ? Math.round(wattsSaved / baselinePowerAvg * 100) : 0;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '11px'\n            },\n            children: [\"Savings: ~\", wattsSaved, \" W (\", pct, \"%) (~\", gramsPerHour, \" g CO\\u2082e/hour)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 21\n          }, this);\n        })()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this), showDashboard && gpuMonitor && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'fixed',\n        inset: 0,\n        background: 'rgba(6,10,12,0.8)',\n        backdropFilter: 'blur(10px)',\n        zIndex: 1200,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: 0\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'relative',\n          width: '100vw',\n          height: '100vh',\n          overflow: 'auto',\n          background: 'linear-gradient(180deg,rgb(75, 160, 106), #0a0d0f)',\n          borderTop: '1px solid rgba(255,255,255,0.06)'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            top: 0,\n            zIndex: 1,\n            borderBottom: '1px solid rgba(0,0,0,0.08)'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              padding: '12px 18px',\n              gap: 12\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                fontFamily: 'monospace',\n                fontSize: 24,\n                color: 'white',\n                fontWeight: 700\n              },\n              children: \"Sustainability UX Dashboard\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                position: 'absolute',\n                right: 18\n              },\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setShowDashboard(false),\n                style: {\n                  background: 'rgba(249, 247, 247, 0.25)',\n                  color: 'rgba(246, 243, 243, 0.25)',\n                  border: '1px solid rgba(230, 12, 12, 0.25)',\n                  borderRadius: 10,\n                  padding: '8px 12px',\n                  cursor: 'pointer'\n                },\n                children: \"Close\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GPUDashboard, {\n          inModal: true,\n          gpuMonitor: gpuMonitor,\n          baselinePowerAvg: baselinePowerAvg,\n          optimizedPowerAvg: optimizedPowerAvg,\n          settings: {\n            theme,\n            pixelRatioClamp,\n            viewportScale,\n            targetFps,\n            backgroundFps\n          },\n          onApplyOptimizations: () => {\n            // Opinionated optimized preset\n            setTheme('dark');\n            setTargetFps(30);\n            setBackgroundFps(5);\n            setPixelRatioClamp(1.2);\n            setViewportScale(0.8);\n            if (sceneRef.current) {\n              sceneRef.current.setPerformanceMode('optimized');\n            }\n          },\n          onExportMetrics: () => {\n            var _s$gpu$temperature;\n            if (!gpuMonitor) return;\n            const s = gpuMonitor.getStats();\n            const csv = ['metric,value', `fps,${s.fps.toFixed(2)}`, `frameTimeMs,${s.frameTime.toFixed(2)}`, `gpuUtilizationPct,${s.gpu.utilization}`, `gpuPowerW,${s.gpu.power}`, `gpuTempC,${(_s$gpu$temperature = s.gpu.temperature) === null || _s$gpu$temperature === void 0 ? void 0 : _s$gpu$temperature.toFixed(1)}`, `drawCalls,${s.drawCalls}`, `triangles,${s.triangles}`, `textures,${s.textures}`, `pixelRatioClamp,${pixelRatioClamp}`, `viewportScale,${viewportScale}`, `targetFps,${targetFps}`, `backgroundFps,${backgroundFps}`, `theme,${theme}`].join('\\n');\n            const blob = new Blob([csv], {\n              type: 'text/csv;charset=utf-8;'\n            });\n            const url = URL.createObjectURL(blob);\n            const link = document.createElement('a');\n            link.href = url;\n            link.download = 'sustainability-metrics.csv';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n            URL.revokeObjectURL(url);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(StressTestControls, {\n      stressTest: stressTest,\n      isRunning: isStressTestRunning,\n      onToggle: toggleStressTest,\n      onIntensityChange: handleIntensityChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n}\n_s(ThreeSceneWithGPU, \"p0oCsng+50qXWYpb8Oz+R3pZuWI=\");\n_c = ThreeSceneWithGPU;\nvar _c;\n$RefreshReg$(_c, \"ThreeSceneWithGPU\");","map":{"version":3,"names":["React","useEffect","useRef","useState","createModelScene","GPUStatsDisplay","GPUStatsToggle","GPUStressTest","StressTestControls","GPUDashboard","jsxDEV","_jsxDEV","ThreeSceneWithGPU","_s","mountRef","sceneRef","gpuMonitor","setGpuMonitor","stressTest","setStressTest","showStats","setShowStats","isStressTestRunning","setIsStressTestRunning","mode","setMode","theme","setTheme","pixelRatioClamp","setPixelRatioClamp","viewportScale","setViewportScale","targetFps","setTargetFps","backgroundFps","setBackgroundFps","getOptimizationInfo","fpsCap","pixelRatioMax","powerPreference","antialias","pauseOnHidden","baselineAvg","setBaselineAvg","optimizedAvg","setOptimizedAvg","baselinePowerAvg","setBaselinePowerAvg","optimizedPowerAvg","setOptimizedPowerAvg","showDashboard","setShowDashboard","current","cleanup","monitor","scene","renderer","setPerformanceMode","setTfps","setBfps","setSceneTheme","getCurrentSettings","currentTheme","test","stopStressTest","toggleStressTest","startStressTest","handleIntensityChange","intensity","adjustIntensity","toggleMode","next","_sceneRef$current$set","_sceneRef$current","call","_sceneRef$current$set2","_sceneRef$current2","_sceneRef$current$set3","_sceneRef$current3","_sceneRef$current$set4","_sceneRef$current4","_sceneRef$current$set5","_sceneRef$current5","measureAverages","windowMs","Promise","resolve","utilSamples","powerSamples","start","performance","now","timer","setInterval","s","getStats","push","gpu","utilization","power","clearInterval","avgUtil","reduce","a","b","length","avgPower","Math","round","runComparison","r","setTimeout","base","opt","style","width","height","position","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","onToggle","onClick","right","bottom","background","color","border","padding","borderRadius","cursor","fontFamily","fontSize","zIndex","boxShadow","optimizationInfo","hasComparison","extraControls","display","flexDirection","gap","alignItems","v","gridTemplateColumns","value","onChange","e","target","type","min","max","parseInt","toFixed","step","parseFloat","wattsSaved","gramsPerWh","gramsPerHour","pct","inset","backdropFilter","justifyContent","overflow","borderTop","top","borderBottom","fontWeight","inModal","settings","onApplyOptimizations","onExportMetrics","_s$gpu$temperature","csv","fps","frameTime","temperature","drawCalls","triangles","textures","join","blob","Blob","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","isRunning","onIntensityChange","_c","$RefreshReg$"],"sources":["C:/D-Drive/AI For Retail/Sustainability Hackathon FLO 2025/Latest Code/sustainable-ux/src/ThreeSceneWithGPU.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { createModelScene } from './ThreeDModelScene';\nimport { GPUStatsDisplay, GPUStatsToggle } from './GPUStatsDisplay';\nimport { GPUStressTest, StressTestControls } from './GPUStressTest';\nimport GPUDashboard from './GPUDashboard';\n\nexport default function ThreeSceneWithGPU() {\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n  const [gpuMonitor, setGpuMonitor] = useState(null);\n  const [stressTest, setStressTest] = useState(null);\n  const [showStats, setShowStats] = useState(true);\n  const [isStressTestRunning, setIsStressTestRunning] = useState(false);\n  const [mode, setMode] = useState('optimized');\n  const [theme, setTheme] = useState('light');\n  const [pixelRatioClamp, setPixelRatioClamp] = useState(1.5);\n  const [viewportScale, setViewportScale] = useState(1.0);\n  const [targetFps, setTargetFps] = useState(30);\n  const [backgroundFps, setBackgroundFps] = useState(5);\n  const getOptimizationInfo = () => {\n    return mode === 'optimized' ? {\n      fpsCap: 30,\n      pixelRatioMax: 1.5,\n      powerPreference: 'low-power',\n      antialias: false,\n      pauseOnHidden: true\n    } : {\n      fpsCap: 60,\n      pixelRatioMax: 3,\n      powerPreference: 'default/hi-perf',\n      antialias: false,\n      pauseOnHidden: true\n    };\n  };\n  const [baselineAvg, setBaselineAvg] = useState(null);\n  const [optimizedAvg, setOptimizedAvg] = useState(null);\n  const [baselinePowerAvg, setBaselinePowerAvg] = useState(null);\n  const [optimizedPowerAvg, setOptimizedPowerAvg] = useState(null);\n  const [showDashboard, setShowDashboard] = useState(true);\n\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Create the Three.js scene\n    const { cleanup, gpuMonitor: monitor, scene, renderer, setPerformanceMode, setTargetFps: setTfps, setBackgroundFps: setBfps, setPixelRatioClamp, setViewportScale, setTheme: setSceneTheme, getCurrentSettings, currentTheme } = createModelScene(mountRef.current);\n    sceneRef.current = { cleanup, scene, renderer, setPerformanceMode, setTfps, setBfps, setPixelRatioClamp, setViewportScale, setSceneTheme, getCurrentSettings };\n    setGpuMonitor(monitor);\n    \n    // Initialize stress test\n    const test = new GPUStressTest(scene, renderer);\n    setStressTest(test);\n\n    return () => {\n      if (sceneRef.current) {\n        test.stopStressTest();\n        sceneRef.current.cleanup();\n      }\n    };\n  }, []);\n\n  const toggleStressTest = () => {\n    if (!stressTest) return;\n    \n    if (isStressTestRunning) {\n      stressTest.stopStressTest();\n      setIsStressTestRunning(false);\n    } else {\n      stressTest.startStressTest(50);\n      setIsStressTestRunning(true);\n    }\n  };\n\n  const handleIntensityChange = (intensity) => {\n    if (stressTest) {\n      stressTest.adjustIntensity(intensity);\n    }\n  };\n\n  const toggleMode = async () => {\n    if (!sceneRef.current) return;\n    const next = mode === 'optimized' ? 'baseline' : 'optimized';\n    sceneRef.current.setPerformanceMode(next);\n    setMode(next);\n  };\n\n  // Sync scene controls when local states change\n  useEffect(() => {\n    if (!sceneRef.current) return;\n    sceneRef.current.setSceneTheme?.(theme);\n  }, [theme]);\n\n  useEffect(() => {\n    if (!sceneRef.current) return;\n    sceneRef.current.setTfps?.(targetFps);\n  }, [targetFps]);\n\n  useEffect(() => {\n    if (!sceneRef.current) return;\n    sceneRef.current.setBfps?.(backgroundFps);\n  }, [backgroundFps]);\n\n  useEffect(() => {\n    if (!sceneRef.current) return;\n    sceneRef.current.setPixelRatioClamp?.(pixelRatioClamp);\n  }, [pixelRatioClamp]);\n\n  useEffect(() => {\n    if (!sceneRef.current) return;\n    sceneRef.current.setViewportScale?.(viewportScale);\n  }, [viewportScale]);\n\n  // Measure averages over a window\n  const measureAverages = (windowMs = 2000) => new Promise((resolve) => {\n    if (!gpuMonitor) return resolve(null);\n    const utilSamples = [];\n    const powerSamples = [];\n    const start = performance.now();\n    const timer = setInterval(() => {\n      const s = gpuMonitor.getStats();\n      utilSamples.push(s.gpu.utilization);\n      powerSamples.push(s.gpu.power);\n      if (performance.now() - start >= windowMs) {\n        clearInterval(timer);\n        const avgUtil = utilSamples.reduce((a, b) => a + b, 0) / utilSamples.length || 0;\n        const avgPower = powerSamples.reduce((a, b) => a + b, 0) / powerSamples.length || 0;\n        resolve({\n          utilization: Math.round(avgUtil),\n          power: Math.round(avgPower)\n        });\n      }\n    }, 100);\n  });\n\n  const runComparison = async () => {\n    if (!sceneRef.current) return;\n    // Baseline\n    sceneRef.current.setPerformanceMode('baseline');\n    await new Promise(r => setTimeout(r, 300));\n    const base = await measureAverages(2000);\n    setBaselineAvg(base ? base.utilization : null);\n    setBaselinePowerAvg(base ? base.power : null);\n    // Optimized\n    sceneRef.current.setPerformanceMode('optimized');\n    await new Promise(r => setTimeout(r, 300));\n    const opt = await measureAverages(2000);\n    setOptimizedAvg(opt ? opt.utilization : null);\n    setOptimizedPowerAvg(opt ? opt.power : null);\n    setMode('optimized');\n  };\n\n  return (\n    <div style={{ width: '100%', height: '100%', position: 'relative' }}>\n      <div ref={mountRef} style={{ width: '100%', height: '100%' }} />\n      <GPUStatsToggle onToggle={setShowStats} />\n      {/* Floating Dashboard Open Button */}\n      <button\n        onClick={() => setShowDashboard(true)}\n        style={{\n          position: 'fixed',\n          right: '16px',\n          bottom: '16px',\n          background: 'linear-gradient(135deg,rgb(238, 245, 241),rgb(231, 241, 224))',\n          color: '#0b0b0b',\n          border: 'none',\n          padding: '12px 16px',\n          borderRadius: '999px',\n          cursor: 'pointer',\n          fontFamily: 'monospace',\n          fontSize: '13px',\n          zIndex: 1100,\n          boxShadow: '0 12px 24px rgba(0,0,0,0.35)'\n        }}\n      >\n        Open Sustainability Dashboard\n      </button>\n      {showStats && gpuMonitor && (\n        <GPUStatsDisplay \n          gpuMonitor={gpuMonitor}\n          mode={mode}\n          optimizationInfo={getOptimizationInfo()}\n          hasComparison={baselineAvg !== null || optimizedAvg !== null}\n          extraControls={\n            <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>\n              <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>\n                <button onClick={toggleMode} style={{ padding: '6px 10px' }}>\n                  Mode: {mode === 'optimized' ? 'Optimized' : 'Baseline'}\n                </button>\n                <button onClick={runComparison} style={{ padding: '6px 10px' }}>\n                  Compare (2s each)\n                </button>\n                <button onClick={() => setShowDashboard(v => !v)} style={{ padding: '6px 10px' }}>\n                  {showDashboard ? 'Hide' : 'Show'} Dashboard\n                </button>\n                {(baselineAvg !== null || optimizedAvg !== null) && (\n                  <div style={{ fontSize: '11px' }}>\n                    Baseline: {baselineAvg ?? '-'}% | Optimized: {optimizedAvg ?? '-'}%\n                  </div>\n                )}\n              </div>\n              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 8 }}>\n                <div style={{ display: 'flex', flexDirection: 'column', gap: 6 }}>\n                  <label style={{ fontSize: 11 }}>Theme</label>\n                  <select value={theme} onChange={(e) => setTheme(e.target.value)} style={{ padding: '4px 6px', fontSize: 12 }}>\n                    <option value=\"dark\">Dark (energy-friendly)</option>\n                    <option value=\"light\">Light</option>\n                    <option value=\"oled\">OLED (pure black)</option>\n                    <option value=\"eink\">E-Ink (grayscale)</option>\n                    <option value=\"high-contrast\">High Contrast</option>\n                  </select>\n                </div>\n                <div style={{ display: 'flex', flexDirection: 'column', gap: 6 }}>\n                  <label style={{ fontSize: 11 }}>Target FPS: {targetFps}</label>\n                  <input type=\"range\" min=\"15\" max=\"60\" value={targetFps} onChange={(e) => setTargetFps(parseInt(e.target.value))} />\n                </div>\n                <div style={{ display: 'flex', flexDirection: 'column', gap: 6 }}>\n                  <label style={{ fontSize: 11 }}>Background FPS: {backgroundFps}</label>\n                  <input type=\"range\" min=\"1\" max=\"15\" value={backgroundFps} onChange={(e) => setBackgroundFps(parseInt(e.target.value))} />\n                </div>\n                <div style={{ display: 'flex', flexDirection: 'column', gap: 6 }}>\n                  <label style={{ fontSize: 11 }}>Pixel Ratio Clamp: {pixelRatioClamp.toFixed(2)}</label>\n                  <input type=\"range\" min=\"0.5\" max=\"3\" step=\"0.1\" value={pixelRatioClamp} onChange={(e) => setPixelRatioClamp(parseFloat(e.target.value))} />\n                </div>\n                <div style={{ display: 'flex', flexDirection: 'column', gap: 6 }}>\n                  <label style={{ fontSize: 11 }}>Viewport Scale: {(viewportScale * 100).toFixed(0)}%</label>\n                  <input type=\"range\" min=\"0.3\" max=\"1\" step=\"0.05\" value={viewportScale} onChange={(e) => setViewportScale(parseFloat(e.target.value))} />\n                </div>\n              </div>\n              {(baselinePowerAvg !== null && optimizedPowerAvg !== null) && (\n                (() => {\n                  const wattsSaved = Math.max(0, baselinePowerAvg - optimizedPowerAvg);\n                  const gramsPerWh = 0.4; // 400 g/kWh\n                  const gramsPerHour = Math.round(wattsSaved * gramsPerWh);\n                  const pct = baselinePowerAvg > 0 ? Math.round((wattsSaved / baselinePowerAvg) * 100) : 0;\n                  return (\n                    <div style={{ fontSize: '11px' }}>\n                      Savings: ~{wattsSaved} W ({pct}%) (~{gramsPerHour} g CO₂e/hour)\n                    </div>\n                  );\n                })()\n              )}\n            </div>\n          }\n        />\n      )}\n      {/* Modal-style overlay Dashboard */}\n      {showDashboard && gpuMonitor && (\n        <div style={{\n          position: 'fixed',\n          inset: 0,\n          background: 'rgba(6,10,12,0.8)',\n          backdropFilter: 'blur(10px)',\n          zIndex: 1200,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          padding: 0\n        }}>\n          <div style={{\n            position: 'relative',\n            width: '100vw',\n            height: '100vh',\n            overflow: 'auto',\n            background: 'linear-gradient(180deg,rgb(75, 160, 106), #0a0d0f)',\n            borderTop: '1px solid rgba(255,255,255,0.06)'\n          }}>\n            <div style={{ top: 0, zIndex: 1, borderBottom: '1px solid rgba(0,0,0,0.08)' }}>\n              <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', padding: '12px 18px', gap: 12 }}>\n                <div style={{ fontFamily: 'monospace', fontSize: 24, color: 'white', fontWeight: 700 }}>Sustainability UX Dashboard</div>\n                <div style={{ position: 'absolute', right: 18 }}>\n                  <button onClick={() => setShowDashboard(false)} style={{\n                    background: 'rgba(249, 247, 247, 0.25)',\n                    color: 'rgba(246, 243, 243, 0.25)',\n                    border: '1px solid rgba(230, 12, 12, 0.25)',\n                    borderRadius: 10,\n                    padding: '8px 12px',\n                    cursor: 'pointer'\n                  }}>Close</button>\n                </div>\n              </div>\n            </div>\n            <GPUDashboard \n              inModal\n              gpuMonitor={gpuMonitor}\n              baselinePowerAvg={baselinePowerAvg}\n              optimizedPowerAvg={optimizedPowerAvg}\n              settings={{ theme, pixelRatioClamp, viewportScale, targetFps, backgroundFps }}\n              onApplyOptimizations={() => {\n                // Opinionated optimized preset\n                setTheme('dark');\n                setTargetFps(30);\n                setBackgroundFps(5);\n                setPixelRatioClamp(1.2);\n                setViewportScale(0.8);\n                if (sceneRef.current) {\n                  sceneRef.current.setPerformanceMode('optimized');\n                }\n              }}\n              onExportMetrics={() => {\n                if (!gpuMonitor) return;\n                const s = gpuMonitor.getStats();\n                const csv = [\n                  'metric,value',\n                  `fps,${s.fps.toFixed(2)}`,\n                  `frameTimeMs,${s.frameTime.toFixed(2)}`,\n                  `gpuUtilizationPct,${s.gpu.utilization}`,\n                  `gpuPowerW,${s.gpu.power}`,\n                  `gpuTempC,${s.gpu.temperature?.toFixed(1)}`,\n                  `drawCalls,${s.drawCalls}`,\n                  `triangles,${s.triangles}`,\n                  `textures,${s.textures}`,\n                  `pixelRatioClamp,${pixelRatioClamp}`,\n                  `viewportScale,${viewportScale}`,\n                  `targetFps,${targetFps}`,\n                  `backgroundFps,${backgroundFps}`,\n                  `theme,${theme}`\n                ].join('\\n');\n                const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n                const url = URL.createObjectURL(blob);\n                const link = document.createElement('a');\n                link.href = url;\n                link.download = 'sustainability-metrics.csv';\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n                URL.revokeObjectURL(url);\n              }}\n            />\n          </div>\n        </div>\n      )}\n      <StressTestControls \n        stressTest={stressTest}\n        isRunning={isStressTestRunning}\n        onToggle={toggleStressTest}\n        onIntensityChange={handleIntensityChange}\n      />\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}